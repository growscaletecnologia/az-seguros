services:
  # ===============================================
  # Backend NestJS Application
  # ===============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development   # se quiser pode trocar pra production se o Dockerfile tiver esse stage
    container_name: az_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production   # ðŸ‘ˆ importante em prod
      - API_MODE=PROD
      - TZ=${TZ}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - API_SECRET=${API_SECRET}
      - PORT=5000 # ðŸ‘ˆ garante que o Nest vai ouvir nessa porta
    ports:
      - "5000:5000"
      - "5555:5555"  # Prisma Studio
    volumes:
      - ./uploads:/app/uploads # mantÃ©m sÃ³ o necessÃ¡rio, sem hot reload em prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - az_network

  # ===============================================
  # PostgreSQL Database
  # ===============================================
  postgres:
    image: postgres:16-alpine
    container_name: az_pg
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - az_network

  # ===============================================
  # Redis Cache
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: az_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1"]
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - az_network


# ===============================================
# Networks
# ===============================================
networks:
  az_network:
    driver: bridge

# ===============================================
# Volumes
# ===============================================
volumes:
  pgdata:
  redisdata:
  pgadmindata:
