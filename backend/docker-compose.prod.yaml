# Docker Compose para Produção
# Otimizado para performance e segurança

services:
  # ===============================================
  # Backend NestJS Application - Production
  # ===============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: az_backend_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_MODE=PROD
      - TZ=${TZ}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - REDIS_URL=redis://redis:6379
      - API_SECRET=${API_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - az_network
    # Limites de recursos para produção
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # ===============================================
  # PostgreSQL Database - Production
  # ===============================================
  postgres:
    image: postgres:16-alpine
    container_name: az_pg_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
      # Configurações de performance para produção
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
      # Configurações customizadas do PostgreSQL
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - az_network
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===============================================
  # Redis Cache - Production
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: az_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata_prod:/data
      # Configuração customizada do Redis
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - az_network
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ===============================================
  # Nginx Reverse Proxy (Opcional)
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: az_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - az_network
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# ===============================================
# Networks
# ===============================================
networks:
  az_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# Volumes
# ===============================================
volumes:
  pgdata_prod:
    driver: local
  redisdata_prod:
    driver: local
  nginx_logs:
    driver: local