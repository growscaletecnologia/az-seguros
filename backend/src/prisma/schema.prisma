// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

/**
 * ==========================================================
 * USER Models & RBAC System
 * =========================================================
 * - User: Represents a user in the system with fields for personal information
 * - UserStatus: Status of the user account (e.g., ACTIVE, INACTIVE, SUSPENDED, PENDING, DELETED, BLOCKED)
 * - Role: Represents a role in the RBAC system (e.g., ADMIN, CUSTOMER)
 * - Permission: Represents a permission for a specific resource and action
 * - RolePermission: Maps permissions to roles
 * - UserPermission: Maps permissions directly to users (overrides)
 * - UserRole: Maps roles to users
 * - InviteToken: Manages user invitations
 * - Address: Represents an address associated with a user
 * - Log: Registra logs de requisições com informações do usuário, rota e tempo de resposta
 */

/**
 * ==========================================================
 * Content Management System (CMS)
 * =========================================================
 * - Post: Representa uma página ou artigo no sistema
 * - Category: Categorias para organizar os posts
 * - Tag: Tags para classificar os posts
 * - PostCategory: Relacionamento entre posts e categorias
 * - PostTag: Relacionamento entre posts e tags
 * - PostMedia: Mídias associadas aos posts
 */

// Legacy role enum - will be replaced by the Role model
enum LegacyRole {
  ADMIN
  CUSTOMER
  SELLER
  AFFILIATE
  MANAGER
  SUPPORT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  DELETED
  BLOCKED
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  phone           String?
  cpfCnpj         String?   @unique
  birthDate       DateTime?
  password        String
  oldPassword     String?
  emailVerifiedAt DateTime?
  isActive        Boolean   @default(false)

  // Legacy role field - will be migrated to use UserRole
  role LegacyRole @default(CUSTOMER)

  // RBAC relationships
  roles           UserRole[]
  userPermissions UserPermission[]
  inviteTokens    InviteToken[]

  // CMS relationships
  posts Post[]

  addresses Address[]
  logs      Log[]

  // Cupom relationships
  coupons      Coupom[]
  couponUsages CoupomUsage[]

  status    UserStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  deleted   Boolean    @default(false) // flag de soft delete
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // ex.: ADMIN
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  users           UserRole[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  resource    String
  action      Action
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           Int     @id @default(autoincrement())
  roleId       Int
  permissionId Int
  allow        Boolean @default(true)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           Int     @id @default(autoincrement())
  userId       String
  permissionId Int
  allow        Boolean // true = allow, false = deny

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model InviteToken {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  expiresAt       DateTime
  usedAt          DateTime?
  createdByUserId String?
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String    @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Log {
  id             String     @id @default(cuid())
  userId         String?
  userName       String?    // Nome do usuário no momento do log
  userEmail      String?    // Email do usuário no momento do log
  path           String
  method         HttpMethod
  statusCode     Int
  userAgent      String?
  ip             String?
  requestBody    Json?
  responseTime   Int // em milissegundos
  createdAt      DateTime   @default(now())
  
  // Informações adicionais sobre a origem do request
  referer        String?
  origin         String?
  xForwardedFor  String?
  xRealIp        String?
  host           String?
  acceptLanguage String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([path])
  @@index([method])
  @@index([createdAt])
  @@index([ip])
}

/**
 * ==========================================================
 * CUPOM Models
 * =========================================================
 * - CupomStatus: Status of the cupom (e.g., ACTIVE, INACTIVE, REDEEMED, EXPIRED)
 * - Cupom: Represents a cupom in the system with fields for code, discount, expiration date, and relationships to users
 * - User: Represents a user in the system with fields for personal information and relationships to addresses
 * - Address: Represents an address associated with a user
 */

enum CoupomStatus {
  ACTIVE
  INACTIVE
  REDEEMED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Coupom {
  id                String       @id @default(cuid())
  code              String       @unique
  discount          Float
  discountType      DiscountType @default(PERCENTAGE)
  expiresAt         DateTime
  userId            String
  status            CoupomStatus @default(ACTIVE)
  usageLimit        Int? // Limite de uso total
  front_publishable Boolean      @default(false) // Controla se o cupom aparece na tela inicial
  description       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
  deleted           Boolean      @default(false) // Flag para soft delete

  // Relacionamento com a tabela de uso de cupons
  usages CoupomUsage[]

  // Relacionamento com o usuário que criou o cupom
  user User? @relation(fields: [userId], references: [id])
}

/**
 * ==========================================================
 * COUPOM USAGE Model
 * =========================================================
 * - CoupomUsage: Registra o uso de cupons por usuários
 */

model CoupomUsage {
  id       String   @id @default(cuid())
  coupomId String
  userId   String
  orderId  String? // Referência opcional para o pedido onde o cupom foi usado
  usedAt   DateTime @default(now())

  // Relacionamentos
  coupom Coupom @relation(fields: [coupomId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  
  @@unique([coupomId, userId, orderId])
}

/**
 * ==========================================================
 * CMS Models - Sistema de Gerenciamento de Conteúdo
 * =========================================================
 */

enum PostStatus {
  DRAFT     // Rascunho
  PUBLISHED // Publicado
  ARCHIVED  // Arquivado
}

model Post {
id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String?
  resume      String     // Resumo curto do conteúdo
  content     String     @db.Text // Conteúdo completo em HTML
  userId      String     // Autor do post
  metadata    Json?      // Metadados para SEO (título, descrição, palavras-chave)
  status      PostStatus @default(DRAFT)
  fullUrl     String?    // URL completa do post (ex: /blog/meu-post)
  coverImage  String?    // URL da imagem de capa do post
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  updatedBy   String?    // Último usuário que atualizou o post
  publishedAt DateTime?  // Data de publicação

  // Relacionamentos
  user       User          @relation(fields: [userId], references: [id])
  categories PostCategory[]
  tags       PostTag[]
  media      PostMedia[]

  @@index([slug])
  @@index([status])
  @@index([userId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  posts PostCategory[]

  @@index([slug])
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  posts PostTag[]

  @@index([slug])
}

model PostCategory {
  postId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relacionamentos
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model PostTag {
  postId    String
  tagId     String
  createdAt DateTime @default(now())

  // Relacionamentos
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model PostMedia {
  id        String   @id @default(cuid())
  postId    String
  url       String   // Caminho para o arquivo de mídia
  type      String   // Tipo de mídia (imagem, vídeo, documento, etc.)
  title     String?  // Título opcional para a mídia
  alt       String?  // Texto alternativo para acessibilidade
  order     Int      @default(0) // Ordem de exibição
  isMain    Boolean  @default(false) // Indica se é a mídia principal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([isMain])
}


/**
 * SYSTEM PAGES Model
 * =========================================================
 * - SystemPage: Representa páginas administrativas do sistema como FAQ, Termos de Uso, Políticas e Ajuda
 */

enum SystemPageType {
  FAQ
  TERMS
  POLICIES
  HELP
  CONTACT
}

enum SystemPageStatus {
  DRAFT     // Rascunho
  PUBLISHED // Publicado
  ARCHIVED  // Arquivado
}

model SystemPage {
  id          String           @id @default(cuid())
  title       String
  slug        String           @unique
  content     String           @db.Text // Conteúdo completo em HTML
  type        SystemPageType   // Tipo da página (FAQ, TERMS, POLICIES, HELP, OTHER)
  status      SystemPageStatus @default(DRAFT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  updatedBy   String?          // Usuário que atualizou a página
  publishedAt DateTime?        // Data de publicação

  @@index([slug])
  @@index([type])
  @@index([status])
}

/**
 * VOUCHER Models
 * =========================================================
 * - VoucherStatus: Status of the voucher (e.g., ACTIVE, INACTIVE, REDEEMED, EXPIRED)
 * - Voucher: Represents a voucher in the system with fields for code, discount, expiration date, and relationships to users
 * - User: Represents a user in the system with fields for personal information and relationships to addresses
 * - Address: Represents an address associated with a user
 */

/**
 * SETTINGS Model
 * =========================================================
 * - Settings: Armazena configurações do sistema, incluindo códigos de rastreamento e scripts
 */

model Settings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String   @db.Text
  description   String?
  gtm_head_code String?  @db.Text
  gtm_body_code String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/**
 * AVALIATION Model
 * =========================================================
 * - Avaliation: Armazena avaliações dos usuários sobre o sistema/serviço
 */

model Avaliation {
  id        String   @id @default(cuid())
  name      String   // Nome do usuário que fez a avaliação
  rating    Int      // Avaliação de 1 a 5 estrelas
  comment   String   @db.Text // Comentário da avaliação
  location  String?  // Local/destino da viagem (opcional)
  avatar    String?  // Iniciais ou URL para avatar do usuário
  active    Boolean  @default(true) // Controla se a avaliação está visível
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rating])
  @@index([active])
}

/**
 * ==========================================================
 * Front Sections - Seção "Por que escolher"
 * =========================================================
 * - FrontSection: Representa os blocos da seção "Por que escolher" na página inicial
 */

enum FrontSectionStatus {
  ACTIVE   // Ativo e visível
  INACTIVE // Inativo e oculto
}

model FrontSection {
  id          String            @id @default(cuid())
  title       String            // Título do bloco (ex: "Melhor Preço")
  description String            @db.Text // Descrição do bloco
  icon        String            // Nome do ícone (ex: "DollarSign", "Clock", "Shield", "Users")
  bgColor     String            @default("blue") // Cor de fundo do ícone (blue, green, orange, etc.)
  order       Int               @default(0) // Ordem de exibição
  status      FrontSectionStatus @default(ACTIVE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([status])
  @@index([order])
}


/**
 * ==========================================================
 * Insurance Integration Models
 * =========================================================
 * - SecurityIntegration: Represents API credentials and config for each insurance provider
 * - InsuranceCache: Caches insurance quotes for better performance and rate limiting
 */

enum InsurerCodeEnum {
  hero 
  mta
}

model SecurityIntegration {
  id              String   @id @default(cuid())
  insurerName     String?  @default("")
  insurerCode     InsurerCodeEnum?
  baseUrl         String?  @default("")
  authUrl         String?
  grantType       String
  clientId        Int
  clientSecret    String
  username        String?
  password        String?
  scope           String?
  ativa           Boolean  @default(true)
  markUp          Int?
  accessToken     String?
  refreshToken    String?
  expiresIn       Int?
  tokenExpiresAt  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  InsuranceCache  InsuranceCache[]
  InsurerProvider InsurerProvider?

  plans           InsurerPlan[]
}

model InsuranceCache {
  id          String   @id @default(cuid())
  insurerId   String
  destination String
  paxCount    Int
  ageGroup    String
  days        Int
  data        Json
  updatedAt   DateTime @default(now())

  insurer SecurityIntegration @relation(fields: [insurerId], references: [id], onDelete: Cascade)
  @@index([insurerId])
  @@index([destination])
}

model InsurerProvider {
 
  id          String   @id @default(cuid())
  slug        String   @default("")
  name        String   @default("")
  logo        String?   @default("")
  terms_url   String?  @default("")
  insurerId   String   @unique
  insurer     SecurityIntegration  @relation(fields: [insurerId], references: [id])

  @@index([insurerId])
}


model InsurerPlan {
  id             Int       @id @default(autoincrement())
  externalId     Int?
  additionalId   Int?      @default(0)
  ref            String
  slug           String    @unique
  is             String
  isShow         String
  name           String
  multitrip      Boolean   @default(false)

  
  securityIntegrationId String?
  securityIntegration   SecurityIntegration? @relation(fields: [securityIntegrationId], references: [id], onDelete: SetNull)

  destinies      InsurerPlanDestiny[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([securityIntegrationId])
}


model InsurerPlanDestiny {
  id             Int                 @id @default(autoincrement())
  insurerPlanId  Int
  destinyId      Int?
  name           String
  slug           String
  displayOrder   Int
  destinyCode    String
  crmBonusValue  Float
  ageGroups      InsurerPlanAgeGroup[]

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  insurerPlan    InsurerPlan         @relation(fields: [insurerPlanId], references: [id], onDelete: Cascade)
  destiny        Destiny?            @relation(fields: [destinyId], references: [id], onDelete: SetNull)
}

model InsurerPlanAgeGroup {
  id                    Int                 @id @default(autoincrement())
  insurerPlanDestinyId  Int
  start                 Int
  end                   Int
  price                 Decimal             @db.Decimal(10, 2)
  priceIof              Decimal?            @db.Decimal(10, 6)

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  insurerPlanDestiny    InsurerPlanDestiny  @relation(fields: [insurerPlanDestinyId], references: [id], onDelete: Cascade)
}

model Destiny {
  id             Int        @id @default(autoincrement())
  externalId     Int?       // id vindo da seguradora
  name           String
  slug           String     @unique
  displayOrder   Int
  destinyCode    String
  crmBonusValue  Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  plans          InsurerPlanDestiny[]
}

model PlanBenefit {
  id              Int      @id @default(autoincrement())
  code            String
  categoryName    String
  name            String
  longDescription String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}