// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

/* 
 * ==========================================================
 *  USER Models & RBAC System
 * =========================================================
  - User: Represents a user in the system with fields for personal information
  - UserStatus: Status of the user account (e.g., ACTIVE, INACTIVE, SUSPENDED, PENDING, DELETED, BLOCKED)
  - Role: Represents a role in the RBAC system (e.g., ADMIN, CUSTOMER)
  - Permission: Represents a permission for a specific resource and action
  - RolePermission: Maps permissions to roles
  - UserPermission: Maps permissions directly to users (overrides)
  - UserRole: Maps roles to users
  - InviteToken: Manages user invitations
  - Address: Represents an address associated with a user
  - Log: Registra logs de requisições com informações do usuário, rota e tempo de resposta
 */

// Legacy role enum - will be replaced by the Role model
enum LegacyRole {
  ADMIN
  CUSTOMER
  SELLER
  AFFILIATE
  MANAGER
  SUPPORT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  DELETED
  BLOCKED
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  phone           String?
  cpfCnpj         String?   @unique
  birthDate       DateTime?
  password        String
  oldPassword     String?
  emailVerifiedAt DateTime?
  isActive        Boolean   @default(false)

  // Legacy role field - will be migrated to use UserRole
  role            LegacyRole @default(CUSTOMER)
  
  // RBAC relationships
  roles           UserRole[]
  userPermissions UserPermission[]
  inviteTokens    InviteToken[]
  
  addresses       Address[]
  logs            Log[]
  status          UserStatus @default(PENDING)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  deleted         Boolean    @default(false) // flag de soft delete
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false) // ex.: ADMIN
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  rolePermissions RolePermission[]
  users           UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  resource        String
  action          Action
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action])
}

model RolePermission {
  id            Int         @id @default(autoincrement())
  roleId        Int
  permissionId  Int
  allow         Boolean     @default(true)

  role          Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserPermission {
  id            Int         @id @default(autoincrement())
  userId        String
  permissionId  Int
  allow         Boolean     // true = allow, false = deny

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model UserRole {
  id      Int     @id @default(autoincrement())
  userId  String
  roleId  Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model InviteToken {
  id               String    @id @default(cuid())
  userId           String
  token            String    @unique
  expiresAt        DateTime
  usedAt           DateTime?
  createdByUserId  String?
  createdAt        DateTime  @default(now())

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false) 

  user      User     @relation(fields: [userId], references: [id])
}

model Log {
  id           String     @id @default(cuid())
  userId       String?
  path         String
  method       HttpMethod
  statusCode   Int
  userAgent    String?
  ip           String?
  requestBody  Json?
  responseTime Int        // em milissegundos
  createdAt    DateTime   @default(now())

  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([path])
  @@index([method])
  @@index([createdAt])
}


/* 
 * ==========================================================
 *  CUPOM Models
 * =========================================================
  - CupomStatus: Status of the cupom (e.g., ACTIVE, INACTIVE, REDEEMED, EXPIRED)
  - Cupom: Represents a cupom in the system with fields for code, discount, expiration date, and relationships to users
  - User: Represents a user in the system with fields for personal information and relationships to addresses
  - Address: Represents an address associated with a user
 */

enum CoupomStatus {
  ACTIVE
  INACTIVE
  REDEEMED
  EXPIRED
}



model Coupom {
  id          String      @id @default(cuid())
  code       String      @unique
  discount   Float
  expiresAt  DateTime
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

 // TODO   estudar possibilidade de relaciomentos
}

/*
 *  VOUCHER Models
 * =========================================================
  - VoucherStatus: Status of the voucher (e.g., ACTIVE, INACTIVE, REDEEMED, EXPIRED)
  - Voucher: Represents a voucher in the system with fields for code, discount, expiration date, and relationships to users
  - User: Represents a user in the system with fields for personal information and relationships to addresses
  - Address: Represents an address associated with a user
 */